#!/usr/bin/env ruby
require 'gli'
begin # XXX: Remove this begin/rescue before distributing your app
require 'mmw'
rescue LoadError
  STDERR.puts "In development, you need to use `bundle exec bin/mmw` to run your app"
  STDERR.puts "At install-time, RubyGems will make sure lib, etc. are in the load path"
  STDERR.puts "Feel free to remove this message from bin/mmw now"
  exit 64
end

class App
  extend GLI::App

  program_desc 'Describe your application here'

  version Mmw::VERSION

  subcommand_option_handling :normal
  arguments :strict

  desc 'Describe some switch here'
  switch [:s,:switch]

  desc 'Describe some flag here'
  default_value 'the default'
  arg_name 'The name of the argument'
  flag [:f,:flagname]

  desc 'Describe create here'
  arg_name 'Describe arguments to create here'
  command :create do |c|
    c.desc 'Describe a switch to create'
    c.switch :s

    c.desc 'Describe a flag to create'
    c.default_value 'default'
    c.flag :f
    c.action do |global_options,options,args|

      # Your command logic here

      # If you have any errors, just raise them
      # raise "that command made no sense"

      puts "create command ran"
    end
  end

  desc 'Describe score here'
  arg_name 'Describe arguments to score here'
  command :score do |c|
    c.action do |global_options,options,args|
      puts "score command ran"
    end
  end

  desc 'Describe clear here'
  arg_name 'Describe arguments to clear here'
  command :clear do |c|
    c.action do |global_options,options,args|
      puts "clear command ran"
    end
  end

  pre do |global,command,options,args|
    # Pre logic here
    # Return true to proceed; false to abort and not call the
    # chosen command
    # Use skips_pre before a command to skip this block
    # on that command only
    true
  end

  post do |global,command,options,args|
    # Post logic here
    # Use skips_post before a command to skip this
    # block on that command only
  end

  on_error do |exception|
    # Error logic here
    # return false to skip default error handling
    true
  end
end

exit App.run(ARGV)
